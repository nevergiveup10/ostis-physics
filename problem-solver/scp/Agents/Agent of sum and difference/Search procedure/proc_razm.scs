scp_program -> proc_razm (*	
-> rrel_params: .proc_razm_params 
(*
	-> rrel_1: rrel_in: _param;;
	-> rrel_2: rrel_in: _check;;
*);;

-> rrel_operators: .proc_razm_operator_set 
(*

	//1. Проводим поиск узлов (слагаемых уравнения), принадлежащих параметру. И все найденные узлы заносим во множество "Слагаемые"
	-> rrel_init: .proc_razm_operator1 
		(*
			  <- searchSetStr3;;
			  -> rrel_1: rrel_fixed: rrel_scp_var: _param;;
			  -> rrel_2: rrel_assign: rrel_scp_var: _arc;;
			  -> rrel_3: rrel_assign: rrel_scp_var: _summand;;

		          -> rrel_set_3: rrel_assign: rrel_scp_var: _set_of_summands;;

			  => nrel_then: .proc_razm_operator2;;
			  => nrel_else: .proc_razm_operator_return;;
		*);; 

	//2. Если в параметре не нашлось слагаемых, то РЕТУРН. Иначе генерируем множество "Множество"
	-> .proc_razm_operator2 
		(*
			 <- genEl;;
			 -> rrel_1: rrel_assign: rrel_const: rrel_node: rrel_scp_var: _set;;

			 => nrel_goto: .proc_razm_operator3;;
		 *);;

	//<Начало ЦИКЛА>
	//3. Начинаем проходиться по слагаемым, которые мы занесли во множество "Слагаемые"
	-> .proc_razm_operator3 
		(*
			  <- searchElStr3;;
			  -> rrel_1: rrel_fixed: rrel_scp_var: _set_of_summands;;
			  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
			  -> rrel_3: rrel_assign: rrel_scp_var: _summand;;

			  => nrel_then: .proc_razm_operator3A;;
			  => nrel_else: .proc_razm_operator4;;
		*);;

	//3.a) Удаляем ребро, соединяющее множество "Слагаемые" и слагаемое
	-> .proc_razm_operator3A
		(*
			 <- eraseEl;;
			 -> rrel_1: rrel_erase: rrel_fixed: rrel_scp_var: _arc;;

			 => nrel_goto: .proc_razm_operator3B;;
		 *);;

	//3.b) Проверяем, является ли слагаемое значением какого-либо узла. Если нет, то переход в начало ЦИКЛА
	-> .proc_razm_operator3B 
		(*
			  <- searchElStr5;;
			  -> rrel_1: rrel_assign: rrel_scp_var: _some_node;;
			  -> rrel_2: rrel_assign: rrel_common: rrel_scp_var: _binary_arc;;
			  -> rrel_3: rrel_fixed: rrel_scp_var: _summand;;
			  -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
			  -> rrel_5: rrel_fixed: rrel_scp_const: nrel_value;;

			   => nrel_then: .proc_razm_operator3C;;
			   => nrel_else: .proc_razm_operator3;;
		*);;

	//3.c) Если слагаемое является значением, то ищем 5-элементные конструкции с этим узлом и заносим 5-ый элемент во множество "Множество".
	//  Если слагаемое является значением, но 5-элементной конструкции не нашлось, то какая-то ошибка в тесте (РЕТУРН)
	-> .proc_razm_operator3C
		(*
			  <- searchSetStr5;;
			  -> rrel_1: rrel_fixed: rrel_scp_var: _some_node;;
			  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc1;;
			  -> rrel_3: rrel_assign: rrel_scp_var: _identification_node;;
		          -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
		          -> rrel_5: rrel_assign: rrel_scp_var: _some_rrel_node;;

		          -> rrel_set_5: rrel_fixed: rrel_scp_var: _set;;

			  => nrel_then: .proc_razm_operator3;;
			  => nrel_else: .proc_razm_operator_return;;
		*);;
	//<Конец ЦИКЛА>

	//4. После того, как мы занесли во "Множество" rrel-узлы, проводим их поиск элементов во "Множестве". Если ничего не найдётся, то РЕТУРН
	-> .proc_razm_operator4 
		(*
			  <- searchElStr3;;
			  -> rrel_1: rrel_fixed: rrel_scp_var: _set;;
			  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
			  -> rrel_3: rrel_assign: rrel_scp_var: _el1;;

			  => nrel_then: .proc_razm_operator5;;
			  => nrel_else: .proc_razm_operator_return;;
		*);;

	//5. Удаляем ребро, связывающее множество "Множество" и записанный туда rrel-узел
	-> .proc_razm_operator5 
		(*
			 <- eraseEl;;
			 -> rrel_1: rrel_erase: rrel_fixed: rrel_scp_var: _arc;;

			 => nrel_goto: .proc_razm_operator6;;
		 *);;
               
	//<Начало ЦИКЛА>
	//6. Ищем второй элемент во множестве "Множество". Если он не нашёлся, то РЕТУРН. (в случае, если известно только одно слагаемое)
	-> .proc_razm_operator6 
		(*
			  <- searchElStr3;;
			  -> rrel_1: rrel_fixed: rrel_scp_var: _set;;
			  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
			  -> rrel_3: rrel_assign: rrel_scp_var: _el2;;

			  => nrel_then: .proc_razm_operator7;;
			  => nrel_else: .proc_razm_operator_return;;
		*);;

	//7. Удаляем ребро, связывающее множество "Множество" и записанный туда rrel-узел
	-> .proc_razm_operator7 
		(*
			 <- eraseEl;;
			 -> rrel_1: rrel_erase: rrel_fixed: rrel_scp_var: _arc;;

			 => nrel_goto: .proc_razm_operator8;;
		 *);;


	//8. Проводим проверку, являются ли rrel-элементы из "Множества" одними и теми же элементами или нет?
	-> .proc_razm_operator8 
		(*
			  <- ifCoin;;
			  -> rrel_1: rrel_fixed: rrel_scp_var: _el1;;
			  -> rrel_2: rrel_fixed: rrel_scp_var: _el2;;

			  => nrel_then: .proc_razm_operator6;;//Если одинаковые, то ищем ещё один второй элемент
			  => nrel_else: .proc_razm_operator9;;//Если это разные элементы, то в чек заносим первый элемент (А почему не второй?)
//И плевать, что занеслось в чек. Если там хоть что-то окажется, то в proc_sum вызовется РЕТУРН. Т.е. тест с ошибкой
		*);; 
	//<Конец ЦИКЛА>

	//9. Заносим в чек rrel-элемент
	-> .proc_razm_operator9 
		(*
		          <- genElStr3;;
			  -> rrel_1: rrel_fixed: rrel_scp_var: _check;;
			  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
			  -> rrel_3: rrel_fixed: rrel_scp_var: _el1;;

			  => nrel_goto: .proc_razm_operator_return;;
		*);;  

		-> .proc_razm_operator_return (*
		<- return;;
		*);;
	*);;
*);;
