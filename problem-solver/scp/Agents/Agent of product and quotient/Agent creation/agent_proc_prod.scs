agent_prod
=> nrel_main_idtf:
	[агентная scp-программа произведения] (* <- lang_ru;; *);
	[agent scp-program of prod] (* <- lang_en;; *);
	<- agent_scp_program;;

scp_program -> agent_prod (*
-> rrel_params: .agent_proc_prod_params 
(*
	-> rrel_1: rrel_in: _event;;
	-> rrel_2: rrel_in: _input_arc;;
*);;

-> rrel_operators: .agent_proc_prod_operator_set 
(*		
	//1. Находим _quest
	-> rrel_init: .agent_proc_prod_operator1 
		(*
		  <- searchElStr3;;
		  -> rrel_1: rrel_assign: rrel_scp_var: _temp;;
		  -> rrel_2: rrel_fixed: rrel_scp_var: _input_arc;;
		  -> rrel_3: rrel_assign: rrel_scp_var: _quest;;

		  => nrel_then: .agent_proc_prod_operator2;;
		*);;

	//2. В rrel_1 устанавливаем имя вопроса для пробуждения агента
	-> .agent_proc_prod_operator2 
		(*
		  <- searchElStr3;;
		  -> rrel_1: rrel_fixed: rrel_scp_const: question_prod;;
		  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
		  -> rrel_3: rrel_fixed: rrel_scp_var: _quest;;

		  => nrel_then: .agent_proc_prod_operator3;;
		  => nrel_else: .agent_proc_prod_operator_return;;
		*);;

	//3. Находим параметр, который задал пользователь
	-> .agent_proc_prod_operator3
		(*
		 	<- searchElStr3;;

			-> rrel_1: rrel_fixed: rrel_scp_var: _quest;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
			-> rrel_3: rrel_assign: rrel_scp_var: _param;;

			=> nrel_then: .agent_proc_prod_operator4;;
			=> nrel_else: .agent_proc_prod_operator_return;;
                 *);;  

	//4. Проверяем наличие связи параметра с неведомой хернёй
	-> .agent_proc_prod_operator4
		(* 
		    <- searchElStr5;;

		    -> rrel_1: rrel_fixed: rrel_scp_var: _param;;
		    -> rrel_2: rrel_assign: rrel_common: rrel_scp_var: _binary_arc;;
		    -> rrel_3: rrel_assign: rrel_scp_var: _NEWEDOMAYA_HERNYA;;
		    -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
		    -> rrel_5: rrel_fixed: rrel_scp_const: nrel_prod;;
			   
			=> nrel_then: .agent_proc_prod_operator5;;
			=> nrel_else: .agent_proc_prod_operator_return;;
		*);;
            
	//5. Генерация узла, в который мы поместим конструкцию ответа
	-> .agent_proc_prod_operator5
		(*
			 <- genEl;;
			 -> rrel_1: rrel_assign: rrel_const: rrel_node: rrel_scp_var: _answer;;
			 => nrel_goto: .agent_proc_prod_operator6;;
		*);;
	
	//6. Запуск процедуры
	-> .agent_proc_prod_operator6 
		(*
			  <- call;;
			  -> rrel_1: rrel_fixed: rrel_scp_const: proc_prod;;
			  -> rrel_2: rrel_fixed: rrel_scp_const: .agent_proc_prod_operator6_params 
				(*
					-> rrel_1: rrel_fixed: rrel_scp_var: _param;;
		                        -> rrel_2: rrel_fixed: rrel_scp_var: _answer;;
				*);;
			  -> rrel_3: rrel_assign: rrel_scp_var: _descr_proc_prod;;

			  => nrel_goto: .agent_proc_prod_operator7;;
		*);;

		-> .agent_proc_prod_operator7 (*
		  <- waitReturn;;
		  -> rrel_1: rrel_fixed: rrel_scp_var: _descr_proc_prod;;

		  => nrel_goto: .agent_proc_prod_operator8;;
		*);; 

	//7. Поиск в ответе хотя бы чего-нибудь
	-> .agent_proc_prod_operator8 
		(*
			 <- searchElStr3;;

			 -> rrel_1: rrel_fixed: rrel_scp_var: _answer;;
			 -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
			 -> rrel_3: rrel_assign: rrel_scp_var: _at_least_something_in_the_answer;;
			 
			 => nrel_then: .agent_proc_prod_operator9;;
		         => nrel_else: .agent_proc_prod_operator10;;
             	*);;  

	//8. Если хотя бы что-то нашлось в ответе, то вопрос закончился удачно
	-> .agent_proc_prod_operator9 
		(*
			  <- genElStr3;;
			  -> rrel_1: rrel_fixed: rrel_scp_const: question_finished_successfully;;
			  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc3;;
			  -> rrel_3: rrel_fixed: rrel_scp_var: _quest;;

			  => nrel_goto: .agent_proc_prod_operator_successful_message;;
		*);;

	//9. Если в ответе ничего не нашлось, то вопрос закончился неудачно
	-> .agent_proc_prod_operator10 
		(*
			  <- genElStr3;;
			  -> rrel_1: rrel_fixed: rrel_scp_const: question_finished_unsuccessfully;;
			  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc5;;
			  -> rrel_3: rrel_fixed: rrel_scp_var: _quest;;

			  => nrel_goto: .agent_proc_prod_operator_unsuccessful_message;;
		*);;

	-> .agent_proc_prod_operator_successful_message 
		(*
			 <- printNl;;
			 -> rrel_1: rrel_fixed: rrel_scp_const: [ОПЕРАЦИЯ ВЫПОЛНИЛАСЬ УСПЕШНО];;

			 => nrel_goto: .agent_proc_prod_operator_return;;
		*);;

	-> .agent_proc_prod_operator_unsuccessful_message 
		(*
			 <- printNl;;
			 -> rrel_1: rrel_fixed: rrel_scp_const: [ВО ВРЕМЯ ОПЕРАЦИИ ВОЗНИКЛА ОШИБКА];;

			 => nrel_goto: .agent_proc_prod_operator_return;;
		*);;
					
	-> .agent_proc_prod_operator_return 
		(*
			<- return;;
		*);;
	*);;
*);;

























