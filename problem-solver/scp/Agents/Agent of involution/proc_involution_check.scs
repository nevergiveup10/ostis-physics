scp_program -> proc_involution_check (*	
-> rrel_params: .proc_involution_check_params 
(*
	-> rrel_1: rrel_in: _param;;
	-> rrel_2: rrel_in: _answer;;
*);;

-> rrel_operators: .proc_involution_check_operator_set 
(*

	//1. Генерируем узел, в который будем заносить узлы, не имеющие значений
	-> rrel_init: .proc_involution_check_operator1 
		(*
			 <- genEl;;
			 -> rrel_1: rrel_assign: rrel_const: rrel_node: rrel_scp_var: _valueless;;

			 => nrel_goto: .proc_involution_check_operator2;;
		*);;

	//2. В параметре, заданном пользователем, находим узел суммы (слагаемое1 + слагаемое2 = сумма)
	-> .proc_involution_check_operator2 
		(*
			  <- searchElStr3;;
			  -> rrel_1: rrel_fixed: rrel_scp_var: _param;;
			  -> rrel_2: rrel_assign: rrel_common: rrel_scp_var: _binary_arc;;
			  -> rrel_3: rrel_assign: rrel_scp_var: _sum_node;;
		        
		          => nrel_then: .proc_involution_check_operator3;;
			  => nrel_else: .proc_involution_check_operator_return;;
		*);;  

	//3. Проверяем, является ли найденное число значением какого-либо узла
	-> .proc_involution_check_operator3 
		(*
			  <- searchElStr5;;
			  -> rrel_1: rrel_assign: rrel_scp_var: _some_node;;
			  -> rrel_2: rrel_assign: rrel_common: rrel_scp_var: _binary_arc;;
			  -> rrel_3: rrel_fixed: rrel_scp_var: _sum_node;;
		          -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
		          -> rrel_5: rrel_fixed: rrel_scp_const: nrel_value;;

			  => nrel_then: .proc_involution_check_operator4;;
			  => nrel_else: .proc_involution_check_operator_3A;;
		*);; 

	//3.а) Проверяем, является ли найденное число идентификацией какого-либо узла 
	-> .proc_involution_check_operator_3A 
		(*
			  <- searchElStr5;;
			  -> rrel_1: rrel_assign: rrel_scp_var: _some_node;;
			  -> rrel_2: rrel_assign: rrel_common: rrel_scp_var: _binary_arc;;
			  -> rrel_3: rrel_fixed: rrel_scp_var: _sum_node;;
			  -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
			  -> rrel_5: rrel_fixed: rrel_scp_const: nrel_identification;;

			  => nrel_then: .proc_involution_check_operator4;;
			  => nrel_else: .proc_involution_check_operator3B;;
		*);;

	//3.б) Заносим найденное число в "незначащий" узел
	-> .proc_involution_check_operator3B 
		(*
			  <- genElStr3;;
			  -> rrel_1: rrel_fixed: rrel_scp_var: _valueless;;
			  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
			  -> rrel_3: rrel_fixed: rrel_scp_var: _sum_node;;

			  => nrel_goto: .proc_involution_check_operator4;;
		*);; 

	//4. Производим поиск узлов, принадлежащих параметру, и заносим их во множество "Обзор найденных узлов"
	-> .proc_involution_check_operator4 
		(*
			  <- searchSetStr3;;
			  -> rrel_1: rrel_fixed: rrel_scp_var: _param;;
			  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
			  -> rrel_3: rrel_assign: rrel_scp_var: _found_nodes;;
		        
			  -> rrel_set_3: rrel_assign: rrel_scp_var: _review_of_found_nodes;;

		          => nrel_then: .proc_involution_check_operator5;;
			  => nrel_else: .proc_involution_check_operator_return;;
		*);;

	//<НАЧАЛО ЦИКЛА> (Смысл цикла в том, чтобы из найденных узлов выбрать те, которые не являются ничьими значениями)
	//5. Начинаем по одному обрабатывать найденные узлы
	-> .proc_involution_check_operator5
		(*
			  <- searchElStr3;;

			  -> rrel_1: rrel_fixed: rrel_scp_var: _review_of_found_nodes;;
			  -> rrel_2: rrel_assign:  rrel_pos_const_perm: rrel_scp_var: _arc;; 
			  -> rrel_3: rrel_assign: rrel_scp_var: _found_node;;

			  => nrel_then: .proc_involution_check_operator5A;;
			  => nrel_else: .proc_involution_check_operator6;;

		*);;

	//5.a) Удаляем ребро, связывающее множество "Обзор найденных узлов" и найденный узел
	-> .proc_involution_check_operator5A 
		(*
			 <- eraseEl;;
			 -> rrel_1: rrel_erase: rrel_fixed: rrel_scp_var: _arc;;

			 => nrel_goto: .proc_involution_check_operator5B;;
		*);;

	//5.b) Проверяем, является ли найденный узел числовым значением какого-либо узла. Если да, то пропускаем его.
	-> .proc_involution_check_operator5B 
		(*
			  <- searchElStr5;;
			  -> rrel_1: rrel_assign: rrel_scp_var: _some_node;;
			  -> rrel_2: rrel_assign: rrel_common: rrel_scp_var: _binary_arc;;
			  -> rrel_3: rrel_fixed: rrel_scp_var: _found_node;;
		          -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
		          -> rrel_5: rrel_fixed: rrel_scp_const: nrel_value;;

			  => nrel_then: .proc_involution_check_operator5;;
			  => nrel_else: .proc_involution_check_operator5C;;
		*);;

	//5.с) Проверяем, является ли найденный узел идентификацией какого-либо узла. Если да, то пропускаем его.
	-> .proc_involution_check_operator5C 
		(*
			  <- searchElStr5;;
			  -> rrel_1: rrel_assign: rrel_scp_var: _some_node;;
			  -> rrel_2: rrel_assign: rrel_common: rrel_scp_var: _binary_arc;;
			  -> rrel_3: rrel_fixed: rrel_scp_var: _found_node;;
			  -> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
			  -> rrel_5: rrel_fixed: rrel_scp_const: nrel_identification;;

			  => nrel_then: .proc_involution_check_operator5;;
			  => nrel_else: .proc_involution_check_operator5D;;
		*);;

                 
	//5.d) Заносим найденный (числовой) узел в "незначащий" узел
	-> .proc_involution_check_operator5D 
		(*
			  <- genElStr3;;
			  -> rrel_1: rrel_fixed: rrel_scp_var: _valueless;;
			  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc12;;
			  -> rrel_3: rrel_fixed: rrel_scp_var: _found_node;;

			  => nrel_goto: .proc_involution_check_operator5;;
		*);; 
	//<Конец ЦИКЛА>

	//6. Переходим к работе с множеством "незначащих" узлов. Выше мы всё пытались запихнуть туда какие-нибудь узлы
	//Если множество "незначащих" узлов пустое, то РЕТУРН (Получается, что все переменные в уравнении известны)
	-> .proc_involution_check_operator6
		(*
			  <- searchElStr3;;
			  -> rrel_1: rrel_fixed: rrel_scp_var: _valueless;;
			  -> rrel_2: rrel_assign:  rrel_pos_const_perm: rrel_scp_var: _arc;; 
			  -> rrel_3: rrel_assign: rrel_scp_var: _valueless_node_no1;;

			  => nrel_then: .proc_involution_check_operator7;;
			  => nrel_else: .proc_involution_check_operator_return;;
		*);;
	
	//7. Удаляем ребро, связывающее множество "незначащих" узлов и "незначащий" узел
	-> .proc_involution_check_operator7
		(*
			 <- eraseEl;;
			 -> rrel_1: rrel_erase: rrel_fixed: rrel_scp_var: _arc;;

			 => nrel_goto: .proc_involution_check_operator8;;
		 *);;


	//8. Пытаемся найти второй узел во множестве "незначащих" узлов
	-> .proc_involution_check_operator8
		(*
			  <- searchElStr3;;
			  -> rrel_1: rrel_fixed: rrel_scp_var: _valueless;;
			  -> rrel_2: rrel_assign:  rrel_pos_const_perm: rrel_scp_var: _arc;; 
			  -> rrel_3: rrel_assign: rrel_scp_var: _valueless_node_no2;;

			  => nrel_then: .proc_involution_check_operator10;;
			  => nrel_else: .proc_involution_check_operator9;;
		*);;

	//9. Если во множестве "незначащих" узлов был только 1 узел, а не 2, то этот найденный узел записывается в ответ.
	//Т.к. если бы нашлось 2 узла или более, то получается что у уравнения более одной неизвестной. А такое решить нельзя
	-> .proc_involution_check_operator9 
		(*
			  <- genElStr3;;
			  -> rrel_1: rrel_fixed: rrel_scp_var: _answer;;
			  -> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc;;
			  -> rrel_3: rrel_fixed: rrel_scp_var: _valueless_node_no1;;

			  => nrel_goto: .proc_involution_check_operator10;;
		*);; 

	//10. Удаление множества "незначащих" узлов
	-> .proc_involution_check_operator10
		(*
			 <- eraseEl;;
			 -> rrel_1: rrel_erase: rrel_fixed: rrel_scp_var: _valueless;;

			 => nrel_goto: .proc_involution_check_operator11;;
		 *);;

	//11. Удаление множества "Обзор найденных узлов"
	-> .proc_involution_check_operator11
		(*
			 <- eraseEl;;
			 -> rrel_1: rrel_erase: rrel_fixed: rrel_scp_var: _review_of_found_nodes;;

			 => nrel_goto: .proc_involution_check_operator_return;;
		 *);;

	-> .proc_involution_check_operator_return 
		(*
			<- return;;
		*);;
	*);;
*);;
